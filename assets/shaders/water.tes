#version 410 core

layout (triangles, equal_spacing, cw) in;

uniform mat4 _ViewMatrix;
uniform mat4 _ProjectionMatrix;
uniform float _Time;

uniform sampler2D _HeightMap;

in VertexData {
    vec3 VertexPosition;
    vec3 VertexNormal;
    vec3 VertexTangeant;
    vec3 VertexBitangeant;
    vec2 TexCoord0;
} tcs_out[];

out VertexData {
    vec3 VertexPosition;
    vec3 VertexNormal;
    vec3 VertexTangeant;
    vec3 VertexBitangeant;
    vec2 TexCoord0;
} tes_out;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
} 

struct GerstnerParameters {
    float Amplitude;
    float Phase;
    vec2 Propagation;
};

// https://en.wikipedia.org/wiki/Trochoidal_wave
#define DEPTH 15
#define M 4
const GerstnerParameters[4] gerstners = GerstnerParameters[](
    GerstnerParameters(0.03, 0.0, vec2(0.0, 1.0)),
    GerstnerParameters(0.05, 1.05, vec2(1.0, 0.0)),
    GerstnerParameters(0.1, 1.73, vec2(0.3, 0.1)),
    GerstnerParameters(0.0008, 2.01, vec2(3.0, -4.0))
);

vec3 gerstnerComponent(vec2 surface, int i) {
    GerstnerParameters p = gerstners[i];
    float k = length(p.Propagation);
    float th_kd = tanh(k * DEPTH);
    float pulsation = sqrt(9.81 * k * th_kd);
    float angle = dot(surface, p.Propagation) - pulsation * _Time - p.Phase;

    vec2 xz = (p.Propagation / k) * (p.Amplitude / th_kd) * sin(angle);

    return vec3(
        -xz.x,
        p.Amplitude * cos(angle),
        -xz.y
    );
}

vec3 gerstnerTrochoidal(vec2 surface, out vec3 normal) {
    vec3 pos = vec3(surface.x, 0.0, surface.y);
    vec3 ddx = vec3(1.0, 0.0, 0.0);
    vec3 ddz = vec3(0.0, 0.0, 1.0);
    for (int i = 0; i < M; i++) {
        vec3 comp = gerstnerComponent(surface, i);
        pos += comp;
        ddx += comp * gerstners[i].Propagation.x;
        ddz += comp * gerstners[i].Propagation.y;
    }
    normal = normalize(cross(ddx, ddz));
    return pos;
}

void main() {
    tes_out.VertexPosition = interpolate3D(tcs_out[0].VertexPosition, tcs_out[1].VertexPosition, tcs_out[2].VertexPosition);
    tes_out.VertexTangeant = interpolate3D(tcs_out[0].VertexTangeant, tcs_out[1].VertexTangeant, tcs_out[2].VertexTangeant);
    tes_out.VertexBitangeant = interpolate3D(tcs_out[0].VertexBitangeant, tcs_out[1].VertexBitangeant, tcs_out[2].VertexBitangeant);
    tes_out.TexCoord0 = interpolate2D(tcs_out[0].TexCoord0, tcs_out[1].TexCoord0, tcs_out[2].TexCoord0);

    //tes_out.VertexPosition.y += texture(_HeightMap, tes_out.TexCoord0).r * 10;

    float y = tes_out.VertexPosition.y;
    tes_out.VertexPosition = gerstnerTrochoidal(tes_out.VertexPosition.xz, tes_out.VertexNormal);
    tes_out.VertexPosition.y += y;

    gl_Position = _ProjectionMatrix * _ViewMatrix * vec4(tes_out.VertexPosition, 1.0);
}

