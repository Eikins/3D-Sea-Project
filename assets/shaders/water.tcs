#version 410 core

layout (vertices = 3) out;

uniform vec3 _ViewPos;

in VertexData {
    vec3 VertexPosition;
    vec3 VertexNormal;
    vec3 VertexTangeant;
    vec3 VertexBitangeant;
    vec2 TexCoord0;
} vs_out[];

out VertexData {
    vec3 VertexPosition;
    vec3 VertexNormal;
    vec3 VertexTangeant;
    vec3 VertexBitangeant;
    vec2 TexCoord0;
} tcs_out[];

#define MIN_DIST 0.5
#define MAX_DIST 20

float getTessellationLevel(float d0, float d1) {
    float avg = (d0 + d1) / 2.0;
    avg = 1.0 / clamp(avg, MIN_DIST, MAX_DIST);

    return 1.0 + (avg - 1.0 / MAX_DIST) * (32.0 - 1.0) / (1.0 / MIN_DIST - 1.0 / MAX_DIST);
}

void main() {
    tcs_out[gl_InvocationID].VertexPosition = vs_out[gl_InvocationID].VertexPosition;
    tcs_out[gl_InvocationID].VertexNormal = vs_out[gl_InvocationID].VertexNormal;
    tcs_out[gl_InvocationID].VertexTangeant = vs_out[gl_InvocationID].VertexTangeant;
    tcs_out[gl_InvocationID].VertexBitangeant = vs_out[gl_InvocationID].VertexBitangeant;
    tcs_out[gl_InvocationID].TexCoord0 = vs_out[gl_InvocationID].TexCoord0;

    float d0 = distance(_ViewPos, vs_out[0].VertexPosition);
    float d1 = distance(_ViewPos, vs_out[1].VertexPosition);
    float d2 = distance(_ViewPos, vs_out[2].VertexPosition);


    gl_TessLevelOuter[0] = getTessellationLevel(d1, d2);
    gl_TessLevelOuter[1] = getTessellationLevel(d2, d0);
    gl_TessLevelOuter[2] = getTessellationLevel(d0, d1);

    gl_TessLevelInner[0] = gl_TessLevelOuter[2];
}

